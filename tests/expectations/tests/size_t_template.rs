/* automatically generated by rust-bindgen */


#![allow(dead_code, non_snake_case, non_camel_case_types, non_upper_case_globals)]


#[repr(C)]
#[derive(Debug, Copy)]
pub struct C {
    pub arr: [u32; 3usize],
}
#[test]
fn bindgen_test_layout_C() {
    assert_eq!(::std::mem::size_of::<C>() , 12usize , concat ! (
               "Size of: " , stringify ! ( C ) ));
    assert_eq! (::std::mem::align_of::<C>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( C ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const C ) ) . arr as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( C ) , "::" , stringify
                ! ( arr ) ));
}
impl Clone for C {
    fn clone(&self) -> Self { *self }
}
impl Default for C {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[test]
fn __bindgen_test_layout_Array_open0_c_int_close0_instantiation() {
    assert_eq!(::std::mem::size_of::<[u32; 3usize]>() , 12usize , concat ! (
               "Size of template specialization: " , stringify ! (
               [u32; 3usize] ) ));
    assert_eq!(::std::mem::align_of::<[u32; 3usize]>() , 4usize , concat ! (
               "Alignment of template specialization: " , stringify ! (
               [u32; 3usize] ) ));
}
